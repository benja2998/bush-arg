#!/usr/bin/env bash
#
# Standard functions.

basename() {
    # Get the basename of a path.
    # Usage: basename "path"
    path="${1%/}"
    printf "%s\\n" "${path##*/}"
}

dirname() {
    # Get the dirname of a path.
    # Usage: dirname "path"
    printf "%s\\n" "${1%/*}/"
}

strip() {
    # Strip characters from a string.
    # Usage: strip "string" "chars to remove"
    printf "%s\\n" "${1//$2}"
}

rstrip() {
    # Strip characters from the end of a string.
    # Usage: rstrip "string" "chars to remove"
    printf "%s\\n" "${1%%$2}"
}

lstrip() {
    # Strip characters from the start of a string.
    # Usage: lstrip "string" "chars to remove"
    printf "%s\\n" "${1##$2}"
}

# shellcheck disable=2086
trim() {
    # When a string is passed to "echo" all trailing and leading
    # whitespace is removed and inside the string multiple spaces are
    # condensed into single spaces.
    #
    # The "set -f/+f" is here so that "echo" doesn't cause any expansion
    # of special characters.
    #
    # The whitespace trim doesn't work with multiline strings so we use
    # "${1//[[:space:]]/ }" to remove newlines before we trim the whitespace.

    set -f
    builtin echo -E ${1//[[:space:]]/ }
    set +f
}

trim_quotes() {
    # Trim quotes from a string.
    # Usage: trim_quotes "string"
    local trim
    trim="${1//\'}"
    printf "%s\\n" "${trim//\"}"
}

lower() {
    # Lowercase a string.
    # Usage: lower "string"
    printf "%s\\n" "${1,,}"
}

upper() {
    # Uppercase a string.
    # Usage: lower "string"
    printf "%s\\n" "${1^^}"
}

date() {
    # Output the date/time.
    # Usage: date "format"
    printf "%($1)T\\n"
}

cat() {
    for file in "$@"; do
        printf "%s\\n" "$(<"$file")"
    done
}

head() {
    # Output n lines from the start of a file.
    # Usage: head "n" "file"
    lines=$((${1:-1}>0?${1:-10}:10))
    mapfile -tn "$lines" line < "${2:-${1:-/etc/os-release}}"
    printf "%s\\n" "${line[@]}"
}

tail() {
    # Output n lines from the end of a file.
    # Usage: tail "n" "file"
    lines=$((${1:-1}>0?${1:-10}:10))
    mapfile -tn 0 line < "${2:-${1:-/etc/os-release}}"
    printf "%s\\n" "${line[@]: -${lines}}"
}
